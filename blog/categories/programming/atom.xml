<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Dario's coredump]]></title>
  <link href="http://berdario.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://berdario.github.io/"/>
  <updated>2014-07-05T17:32:56-07:00</updated>
  <id>http://berdario.github.io/</id>
  <author>
    <name><![CDATA[Dario Bertini]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git]]></title>
    <link href="http://berdario.github.io/blog/2014/06/08/git/"/>
    <updated>2014-06-08T18:07:00-07:00</updated>
    <id>http://berdario.github.io/blog/2014/06/08/git</id>
    <content type="html"><![CDATA[<p>I started using a VCS in 2009 for my bachelor thesis, it was a mess of a project: the 3 guys that previously worked on that code never bothered to use one, and so I took the opportunity to chose one. I picked Bazaar (bzr) since it seemed easy enough, written by someone who wasn&rsquo;t <a href="https://www.youtube.com/watch?v=4XpnKHJAok8">so full of himself</a>, had all the DVCS goodies and was extensively used in the Ubuntu project (I already had the opportunity to use Launchpad, and I really liked the experience of reporting bugs there, compared to the subpar experience on Bugzillas or Github). Also of note, since some people might hold this misconception: it&rsquo;s not a NIH project. The Mercurial project started just a few days after Git, while Bazaar was released just the prior month. Overall they appeared on the scene almost at the same time, around the time of Bitkeeper&rsquo;s free version disappeareance (but if we want to be picky, the NIH would go the other way, since Bazaar had as its precursor Baz/Gnu Arch)</p>

<p>I kept using it for some of my personal projects, my dotfiles and such&hellip; But obviously in the meantime I had the opportunity to try out the competition: Hg, Darcs and obviously, Git.</p>

<p>Of these, I always disliked Git, mainly due to its UI, mind-numbingly complex man pages and unhelpful errors, example:</p>

<p><code>
$git pull --force repo
There are no candidates for merging among the refs that you just fetched.
Generally this means that you provided a wildcard refspec which had no
matches on the remote end.
$bzr pull --overwrite repo
All changes applied successfully.
Now on revision 2.
</code></p>

<p>Or, let&rsquo;s compare the length of the <code>log</code> command documentation:</p>

<p><code>
git help log | wc -l ; and bzr help log | wc -l ; and hg help -v log | wc -l
1633
191
133
</code></p>

<p>Or the apparently arbitrarily different command names and huge number of flags required for the simplest use cases:</p>

<ul>
<li><code>git daemon --base-path=. --export-all --enable=receive-pack --reuseaddr --informative-errors --verbose</code> instead of <code>bzr serve</code> or <code>hg serve</code> (the latter even gives you a nifty web interface!)</li>
<li><code>git symbolic-ref -q HEAD</code> instead of <code>hg branch</code></li>
<li><code>git show</code> instead of <code>bzr cat</code>, <code>hg cat</code></li>
<li><code>git ls-tree --names-only -r r1</code> instead of <code>bzr ls -r r1</code> (no, <code>git ls-files</code> won&rsquo;t do what you expect)</li>
</ul>


<p>Or, if you want to push a repo to a local folder, git will complain that it&rsquo;s not secure since it won&rsquo;t automatically update the working directory. The obvious solutions (<code>denyCurrentBranch</code> set to ignore or using a bare repository) obviously aren&rsquo;t true solutions, since you&rsquo;ll have to then create the wd manually (unlike with bzr, thanks to its different branch model).</p>

<p>Every DVCS uses hashes to discern between the different commits/revisions, but while bzr and hg give you a meaningful increasing number, in git you&rsquo;re forced to use the sha1 hash (you can just use the first few chars, but it&rsquo;s still a bore to remember which sha1 comes before/after 3 or 4 other sha1 if those aren&rsquo;t consecutive).</p>

<p>You might argue that it makes sense since it&rsquo;s a <em>&ldquo;true&rdquo;</em> distributed system, until you realize that most organizations still have an authorative repository you can pull from when you get back from holidays or, even worse, that most projects on github are actually small single-user repositories, where the benefit of globally unique hashes is dwarfed by the hassle of handling it. (Before 2010 on github there wasn&rsquo;t even the concept of &ldquo;Organization&rdquo; as we have now).</p>

<p>Other than git itself, I loathe the closed minded git-users that don&rsquo;t care and aren&rsquo;t willing to understand other tools. For example, the DAG (Direct Acyclic Graph) it&rsquo;s an obvious approach to model a VCS: you pick a point/commit on it, an you can look at the tree deriving from it. But somehow, by virtue of it being among the first things explained in documentation about git innards, and due to the fact that a lot of git users are drawn to understand its innards (not due to curiosity, I fear, but due to the poor abstraction that the UI and the man pages are, they force you to learn such things), someone got the idea that the DAG was something special and unique of git. An example of a man page that forces you to deal with these concept is the one of <code>rev-parse</code>: if you want to learn what the <code>r1..r2</code> syntax does, you just have to read:</p>

<blockquote><p> &lt;rev1&gt;..&lt;rev2&gt;
  Include commits that are reachable from <rev2> but exclude those
  that are reachable from <rev1>. When either <rev1> or <rev2> is
  omitted, it defaults to HEAD.</p></blockquote>

<p>This definition makes sense, assuming that you can specify revisions on different branchs&hellip; but how often do you need to do that? And do you expect <code>rev1</code> to be included or excluded? Compare with bzr, where you can select ranges with <code>2..5</code>, <code>2..</code>, <code>..2</code> even using negatives: <code>..-2</code> and the common case is simple.</p>

<p>Another example of &ldquo;smug git user&rdquo; is <a href="http://0pointer.de/blog/projects/bizarre-fun.html">this</a>: at first he starts with the nonsensical <code>man bzr-get</code>, which would make sense only if an actual <code>bzr-get</code> command existed (unlike git, other DVCS aren&rsquo;t separate commands stuck together with <strike>duct tape</strike> shell scripts). But later he would&rsquo;ve been able to understand right away if he truly looked at the output of <code>man bzr</code> or <code>bzr help</code>, which tells you that what you want is <code>bzr help get</code> (the same help system works in git, and I&rsquo;m quite sure that it was like that also in 2009).</p>

<p>But at the end, most of the issues are just with the UI. Other people just say: <em>&ldquo;but you don&rsquo;t use git from the command line: you just use the IDE integration&rdquo;</em>, but this obviously has its limits since you won&rsquo;t be able to use a single IDE for all the possible projects and all the possible languages. Not to mention that if something goes wrong, the error message might be hidden (I&rsquo;ve seen this happen), but if instead you&rsquo;ll try do it explicitly from cli, any errors will be painfully obvious very soon.</p>

<p>And if any project is managed with git, I never had any problem to man up and work with it, in fact I have several repositories on github, and even this very blog is hosted there. But while launchpad was my go-to choice for my own projects/snippets I&rsquo;ve now witnessed some job application forms that don&rsquo;t even have a field for a website/repository url, and instead ask to submit your github profile, to look at your projects. As much as I hate this monoculture and shortsighted choices, I realize that having code split all over the place on different code hosting sites is not in my best interest (I sent my application, but I&rsquo;m quite certain that they never even looked at my CV due to that).</p>

<p>I was on the fence until some months ago, when <a href="https://lists.gnu.org/archive/html/emacs-devel/2014-01/msg00005.html">even Emacs</a> (the most prominent project non-hosted on launchpad that uses bzr, and the only one I know) started the migration process to git, so now I&rsquo;m yielding: I&rsquo;ll keep using bzr if it&rsquo;ll happen that an existing project uses it, but as far as personal code goes, I&rsquo;m going to convert my bzr repos to git, and go with the flow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tabs vs Spaces]]></title>
    <link href="http://berdario.github.io/blog/2014/06/07/tabs-vs-spaces/"/>
    <updated>2014-06-07T21:52:00-07:00</updated>
    <id>http://berdario.github.io/blog/2014/06/07/tabs-vs-spaces</id>
    <content type="html"><![CDATA[<p>Historically I&rsquo;ve been one of the few people who consistently preferred to use Tabs over Space (I&rsquo;m obviously talking about the characters: 0x9 against 0x20).</p>

<p>People usually contest that &ldquo;any decent editor&rdquo; makes using spaces just as comfortable as using tabs. I beg to differ: while editors don&rsquo;t have any problem in adding <code>n</code> spaces when pressing the tab key, and configuring to delete 4 indentation spaces when at the beginning of the line with a single press of del/backspace, you still have to press the arrow keys <code>n</code> times when navigating the code. I use emacs and sometimes I use vim, but I never really got the bindings for jumping around the text truly ingrained in my muscle memory.</p>

<p>Since this is an issue mostly with the whitespace sensitive languages, like Python and Haskell, you might argue that usually you don&rsquo;t need to navigate the code like that&hellip; a small example:</p>

<p>```python
class A:</p>

<pre><code>def f(self):
    pass
</code></pre>

<p>```</p>

<p>Now let&rsquo;s assume that I want to go up to the <code>d</code> of <code>def</code>, open a newline and insert a new decorato and that my cursor is at the end of the <code>pass</code> token. You can move to the previous line and then go to the beginning, or do it the other way around: go to the width corresponding to the beginning of the previous line and then move to it. Since I prefer to avoid seeing the cursor jump left-right (I don&rsquo;t like to have &ldquo;phantom whitespace&rdquo; after the end of the line), usually I do the latter. By pressing the home key I might get at the beginning of the line <em>after</em> the indentation (at the <code>p</code>) or <em>before</em>, but this means that I still have to navigate one indentation level. With tabs this is just a single keypress in either direction, but with spaces, I have to press it multiple times. Worse: since it isn&rsquo;t a border of a token, there&rsquo;re no obvious keybindings to jump right to it.</p>

<p>Obviously it&rsquo;s possible to write some emacs lisp or vimscript to do it, but I never found that itch worth scratching enough. Also: if I was really accustomed to vim I could just move around the code in a different way, but alas, that&rsquo;s not the case, and often I might want to edit some small snippet in a webbrowser or other platform different than vim. On the other hand, all the whitespace sensitive languages have good enough support in these editors that you can do simpler tasks (like indeting/dedenting a block of code) with a single keybinding, regardless of tabs/spaces.</p>

<p>One complaint about tabs is that spaces are needed for alignment, and thus this could lead to mix tabs and spaces, especially in Haskell: developers are used to align the code to the previous lines (otherwise it won&rsquo;t even compile, unlike with Python), but the truth is that if you put a newline just after the <code>=</code> signs, you can just use tabs to increase the indentation, without ever worrying about the alignment.</p>

<p>People usually are also opposed to tabs since it makes the code display differently on different machines: this is misguided, since <strong>as long as you&rsquo;re using only one between spaces/tabs</strong> all the indentations will always be aligned, regardless of the whitespace char you chose from. But using tabs will give you the advantage of choosing how much space you&rsquo;ll spend by indenting, without imposing your choice on the other developers. Obviously, the feature of changing the display size of tabs depends on the editor: in some it&rsquo;s easier than in others, and in other cases (like web browsers) you can&rsquo;t even do it, afaik&hellip; and you&rsquo;ll be stuck with 8 spaces for a tab, or something similar.</p>

<p>Emacs at times really strained my patience: a fellow programmer recently told me: <em>&ldquo;it&rsquo;s supposed to be extensible, but it&rsquo;s not written anywhere that it should be coherent in its behaviour&rdquo;</em> when I showed him how the official Forth mode used tabs even when <code>indent-tabs-mode</code> was set to <code>nil</code>. Other problems plagued the different python-mode availables: pressing tab to indent a new block, or using the indent/dedent commands at times used different whitespace characters (probably because it was hardcoded to use spaces in certain cases).</p>

<p>So, the crux of the issue is not using different whitespace chars, and it&rsquo;s interesting to think about what use the whitespace fulfill, and what choice do we have available: In a sense, as long as we store information as text, we&rsquo;ll use a bidimensional layout. this requires something to imprint a vertical direction, and an horizontal direction. The vertical direction is obviously supplied by the newlines: each time we want to push down vertically, it&rsquo;s a newline; but this leaves us with the horizontal separator, and if you think about it you don&rsquo;t really <strong>need</strong> more than one of this kind.</p>

<p>Yes, space have a fixed width, and tabs are useful for alignin tables on terminal outputs or something like that, but they won&rsquo;t work if your lines are skewed by more than 8 (or the number of spaces equivalent of a tab in your terminal) characters; unless you use multiple tabs, but if you know in advance how many tab characters you need, you should be able to do the same with spaces (like with the <code>.rjust()</code> and <code>.ljust()</code> methods for python strings).</p>

<p>So, we could just write code and separate each and every token with <code>\t</code>, and get rids of spaces altogether! (since I think that tabs are the superior alternative) But nobody&rsquo;s going to do that.</p>

<p>So, I said we only need 2 whitespace characters, and yet we have spaces, tabs, vertical tabs, newlines&hellip; ASCII is a fact of life, and we won&rsquo;t get rid of baggage that we don&rsquo;t use soon (just like the the Bell character), so we might just be better off by standardizing on some, and avoid hassles.</p>

<p>And that&rsquo;s why I&rsquo;m writing this post: even if historically I always pushed for my preference, and some of my friends are reminded of me also for my &ldquo;foolish&rdquo; preference, I always cared about a common standard and the path of least resistance. My goto language for a lot of time has been Python, and its <a href="http://legacy.python.org/dev/peps/pep-0008/">PEP8</a> unfortunately just acknowledged that spaces were used more often, and in no case the PEP8 alone was an excuse to change pre-existing code. So the few times when people complained that my code was not following the PEP8, and that I shouldn&rsquo;t bother trying to properly configure Emacs to work with tabs (and just convert back the file to tabs, if needed), I felt obliged to point them that there was no clear-cut standard, but only a vague consensus.</p>

<p>But last year, the <a href="http://hg.python.org/peps/rev/fb24c80e9afb">PEP8 was updated</a>, and luckily it now explicitly states that spaces are to be preferred. So, even if my pet peeve was in the other direction, I&rsquo;m heavily relieved that now <em>There should be one&mdash; and preferably only one &mdash;obvious way to do it.</em> also for this issue :) and in fact some months ago at last <a href="http://bazaar.launchpad.net/~berdario/+junk/dotfiles/revision/63">I updated my Emacs' init.el</a>.</p>
]]></content>
  </entry>
  
</feed>
